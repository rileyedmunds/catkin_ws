// Generated by gencpp from file tt5_ros/MotorCommands.msg
// DO NOT EDIT!


#ifndef TT5_ROS_MESSAGE_MOTORCOMMANDS_H
#define TT5_ROS_MESSAGE_MOTORCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tt5_ros
{
template <class ContainerAllocator>
struct MotorCommands_
{
  typedef MotorCommands_<ContainerAllocator> Type;

  MotorCommands_()
    : motor1(0)
    , motor2(0)
    , motor3(0)
    , motor4(0)  {
    }
  MotorCommands_(const ContainerAllocator& _alloc)
    : motor1(0)
    , motor2(0)
    , motor3(0)
    , motor4(0)  {
  (void)_alloc;
    }



   typedef int32_t _motor1_type;
  _motor1_type motor1;

   typedef int32_t _motor2_type;
  _motor2_type motor2;

   typedef int32_t _motor3_type;
  _motor3_type motor3;

   typedef int32_t _motor4_type;
  _motor4_type motor4;




  typedef boost::shared_ptr< ::tt5_ros::MotorCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tt5_ros::MotorCommands_<ContainerAllocator> const> ConstPtr;

}; // struct MotorCommands_

typedef ::tt5_ros::MotorCommands_<std::allocator<void> > MotorCommands;

typedef boost::shared_ptr< ::tt5_ros::MotorCommands > MotorCommandsPtr;
typedef boost::shared_ptr< ::tt5_ros::MotorCommands const> MotorCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tt5_ros::MotorCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tt5_ros::MotorCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tt5_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'tt5_ros': ['/home/jianlan/catkin_ws/src/tt5_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tt5_ros::MotorCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tt5_ros::MotorCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tt5_ros::MotorCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tt5_ros::MotorCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tt5_ros::MotorCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tt5_ros::MotorCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tt5_ros::MotorCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0dd74ff5da498b0f13032c941aac3e3e";
  }

  static const char* value(const ::tt5_ros::MotorCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0dd74ff5da498b0fULL;
  static const uint64_t static_value2 = 0x13032c941aac3e3eULL;
};

template<class ContainerAllocator>
struct DataType< ::tt5_ros::MotorCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tt5_ros/MotorCommands";
  }

  static const char* value(const ::tt5_ros::MotorCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tt5_ros::MotorCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 motor1\n\
int32 motor2\n\
int32 motor3\n\
int32 motor4\n\
";
  }

  static const char* value(const ::tt5_ros::MotorCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tt5_ros::MotorCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor1);
      stream.next(m.motor2);
      stream.next(m.motor3);
      stream.next(m.motor4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tt5_ros::MotorCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tt5_ros::MotorCommands_<ContainerAllocator>& v)
  {
    s << indent << "motor1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor1);
    s << indent << "motor2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor2);
    s << indent << "motor3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor3);
    s << indent << "motor4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TT5_ROS_MESSAGE_MOTORCOMMANDS_H
