# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tt5_ros/SixRodMotorCommands.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tt5_ros.msg

class SixRodMotorCommands(genpy.Message):
  _md5sum = "7fa90e4d240a7d921ce4a895ea162ce7"
  _type = "tt5_ros/SixRodMotorCommands"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """tt5_ros/MotorCommands rod1
tt5_ros/MotorCommands rod2
tt5_ros/MotorCommands rod3
tt5_ros/MotorCommands rod4
tt5_ros/MotorCommands rod5
tt5_ros/MotorCommands rod6
================================================================================
MSG: tt5_ros/MotorCommands
int32 motor1
int32 motor2
int32 motor3
int32 motor4"""
  __slots__ = ['rod1','rod2','rod3','rod4','rod5','rod6']
  _slot_types = ['tt5_ros/MotorCommands','tt5_ros/MotorCommands','tt5_ros/MotorCommands','tt5_ros/MotorCommands','tt5_ros/MotorCommands','tt5_ros/MotorCommands']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rod1,rod2,rod3,rod4,rod5,rod6

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SixRodMotorCommands, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rod1 is None:
        self.rod1 = tt5_ros.msg.MotorCommands()
      if self.rod2 is None:
        self.rod2 = tt5_ros.msg.MotorCommands()
      if self.rod3 is None:
        self.rod3 = tt5_ros.msg.MotorCommands()
      if self.rod4 is None:
        self.rod4 = tt5_ros.msg.MotorCommands()
      if self.rod5 is None:
        self.rod5 = tt5_ros.msg.MotorCommands()
      if self.rod6 is None:
        self.rod6 = tt5_ros.msg.MotorCommands()
    else:
      self.rod1 = tt5_ros.msg.MotorCommands()
      self.rod2 = tt5_ros.msg.MotorCommands()
      self.rod3 = tt5_ros.msg.MotorCommands()
      self.rod4 = tt5_ros.msg.MotorCommands()
      self.rod5 = tt5_ros.msg.MotorCommands()
      self.rod6 = tt5_ros.msg.MotorCommands()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_24i.pack(_x.rod1.motor1, _x.rod1.motor2, _x.rod1.motor3, _x.rod1.motor4, _x.rod2.motor1, _x.rod2.motor2, _x.rod2.motor3, _x.rod2.motor4, _x.rod3.motor1, _x.rod3.motor2, _x.rod3.motor3, _x.rod3.motor4, _x.rod4.motor1, _x.rod4.motor2, _x.rod4.motor3, _x.rod4.motor4, _x.rod5.motor1, _x.rod5.motor2, _x.rod5.motor3, _x.rod5.motor4, _x.rod6.motor1, _x.rod6.motor2, _x.rod6.motor3, _x.rod6.motor4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.rod1 is None:
        self.rod1 = tt5_ros.msg.MotorCommands()
      if self.rod2 is None:
        self.rod2 = tt5_ros.msg.MotorCommands()
      if self.rod3 is None:
        self.rod3 = tt5_ros.msg.MotorCommands()
      if self.rod4 is None:
        self.rod4 = tt5_ros.msg.MotorCommands()
      if self.rod5 is None:
        self.rod5 = tt5_ros.msg.MotorCommands()
      if self.rod6 is None:
        self.rod6 = tt5_ros.msg.MotorCommands()
      end = 0
      _x = self
      start = end
      end += 96
      (_x.rod1.motor1, _x.rod1.motor2, _x.rod1.motor3, _x.rod1.motor4, _x.rod2.motor1, _x.rod2.motor2, _x.rod2.motor3, _x.rod2.motor4, _x.rod3.motor1, _x.rod3.motor2, _x.rod3.motor3, _x.rod3.motor4, _x.rod4.motor1, _x.rod4.motor2, _x.rod4.motor3, _x.rod4.motor4, _x.rod5.motor1, _x.rod5.motor2, _x.rod5.motor3, _x.rod5.motor4, _x.rod6.motor1, _x.rod6.motor2, _x.rod6.motor3, _x.rod6.motor4,) = _struct_24i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_24i.pack(_x.rod1.motor1, _x.rod1.motor2, _x.rod1.motor3, _x.rod1.motor4, _x.rod2.motor1, _x.rod2.motor2, _x.rod2.motor3, _x.rod2.motor4, _x.rod3.motor1, _x.rod3.motor2, _x.rod3.motor3, _x.rod3.motor4, _x.rod4.motor1, _x.rod4.motor2, _x.rod4.motor3, _x.rod4.motor4, _x.rod5.motor1, _x.rod5.motor2, _x.rod5.motor3, _x.rod5.motor4, _x.rod6.motor1, _x.rod6.motor2, _x.rod6.motor3, _x.rod6.motor4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.rod1 is None:
        self.rod1 = tt5_ros.msg.MotorCommands()
      if self.rod2 is None:
        self.rod2 = tt5_ros.msg.MotorCommands()
      if self.rod3 is None:
        self.rod3 = tt5_ros.msg.MotorCommands()
      if self.rod4 is None:
        self.rod4 = tt5_ros.msg.MotorCommands()
      if self.rod5 is None:
        self.rod5 = tt5_ros.msg.MotorCommands()
      if self.rod6 is None:
        self.rod6 = tt5_ros.msg.MotorCommands()
      end = 0
      _x = self
      start = end
      end += 96
      (_x.rod1.motor1, _x.rod1.motor2, _x.rod1.motor3, _x.rod1.motor4, _x.rod2.motor1, _x.rod2.motor2, _x.rod2.motor3, _x.rod2.motor4, _x.rod3.motor1, _x.rod3.motor2, _x.rod3.motor3, _x.rod3.motor4, _x.rod4.motor1, _x.rod4.motor2, _x.rod4.motor3, _x.rod4.motor4, _x.rod5.motor1, _x.rod5.motor2, _x.rod5.motor3, _x.rod5.motor4, _x.rod6.motor1, _x.rod6.motor2, _x.rod6.motor3, _x.rod6.motor4,) = _struct_24i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_24i = struct.Struct("<24i")
